generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents a Telegram user participating in the system.
model User {
  id Int @id @default(autoincrement())

  /// User Solona Address
  solAddress String

  /// Optional username (Telegram handle)
  username String?

  /// last wallet connect time
  connectAt DateTime @default(now())

  /// All recorded IP addresses for the user
  ips             IP[]
  project         project[]
  ProjectReferrel ProjectReferrel[]
}

/// Stores user IP details and geo-location metadata for auditing or fraud prevention.
model IP {
  id Int @id @default(autoincrement())

  /// Telegram ID of the associated user
  userId Int

  /// Relation to the User entity
  user User @relation(fields: [userId], references: [id])

  /// IP address
  ip String

  /// Optional city of the IP
  city String?

  /// Optional region
  region String?

  /// Optional country
  country String?

  /// Optional lat/lng coordinates
  loc String?

  /// Optional ISP or organization info
  org String?

  /// Postal code (if available)
  postal String?

  /// Timezone (if available)
  timezone String?

  /// Any additional metadata
  info String

  /// When the IP record was created
  createdAt DateTime @default(now())
}

/// Represents a project submitted by a user.
model project {
  id              Int               @id @default(autoincrement()) // Unique project ID that store on database
  userId          Int // ID of the user who submitted the project
  user            User              @relation(fields: [userId], references: [id]) // Relation to the User entity
  name            String // Name of the project
  description     String // description of the project
  launchDate      DateTime // Launch Date of the project
  image           String // URL to the project's image/logo
  reward          String // how much reward the project offers
  task            String[] // List of tasks associated with the project
  isDelete        Boolean           @default(false) // Soft delete flag:: user can delete project from his profile
  createdAt       DateTime          @default(now()) // Timestamp when the project was created
  updatedAt       DateTime          @updatedAt // Timestamp when the project was last updated
  ProjectReferrel ProjectReferrel[]
}

/// Project referrel model 
model ProjectReferrel {
  projectId Int // ID of the project being referred
  project   project  @relation(fields: [projectId], references: [id]) // Relation to the project entity
  userId    Int // Id of the user who made the referrel
  user      User     @relation(fields: [userId], references: [id]) // Relation to the user entity
  visitorIp String // IP address of the visitor who clicked the referrel link
  createdAt DateTime @default(now()) // Timestamp when the referrel was created

  @@unique([projectId, userId, visitorIp])
}

/// Admin Panel Login model
model Admins {
  id        Int      @id @default(autoincrement())
  email     String   @unique // admin email 
  password  String // admin password
  createdAt DateTime @default(now()) // the time when the admin is created
  updatedAt DateTime @updatedAt
}
